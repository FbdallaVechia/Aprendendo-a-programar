**VARIÁVEL**

É um espaço reservado na memória do computador para guardar um tipo de informação. Variáveis devem receber nomes para poder servir de referência e serem alteradas quando necessário. Por isso devem ser declaradas antes de serem usadas. Mesmo que uma variável assuma diferentes valores, ela só poderá armazenar um valor por vez.

Para se declarar uma variável é necessária criar um identificador, que será o nome da variável no algoritimo:
	- VAR<nome_da_variavel> : <tipo_da_variavel>
			ou
	- VAR<lista_de_variaveis> : <tipo_das_variaveis>

Numa mesma linha pode-se determinar uma ou mais variáveis do mesmo tipo, e para isso os nomes devem ser separados por vírgula. Se as variáveis forem diferentes, devem ser declaradas em linhas também diferentes.

A diferença entre caractere e cadia de caracteres -> para um caractere usa-se 'aspas simples' e para uma cadeia de caracteres "aspas duplas"

**TIPOS DE DADOS**

Os tipos de dados mais comuns são conhecidos como tipos primitivos, como:
	- Inteiros: são os dados numéricos positivos ou negativos, eliminando-se destes qualquer número fracionário;
	- Reais: São os dados numpericos positivos, negativos e números fracionários;
	- Caracteres: são as sequências, que devem ser mostradas entre "aspas". Caracteres são conhecidos também como alfanuméricos, string, literal ou cadeia;
	- Lógicos: São os dados com valor verdadeiro ou falso, podendo ser representados apenas por um dos dois valores. Também nomeados de "tipo booleano". 

**CONSTANTES**

Seus dados são fixos e não se alteram ao longo da execução de um programa. Geralmente a constante é definida no início do programa e sua utilização acontece no decorrer dele.

**COMANDOS DE ATRIBUIÇÃO**

**OPERADORES**

Os operadores são meios pelos quais comparamos, incrementamos, decrementamos e avaliamos dados dentro do computador. Existem três tipos de operadores, que são: 
	- Operadores aritméticos: expressões podem ser usadas tanto para variáveis quanto para constantes. Seguem sempre a hierarquia:
		1º: parenteses;
		2º: exponenciação;
		3º: multiplicação, divisão (o que vier primeiro);
		4º: + ou - (o que vier primeiro).

	- Operadores relacionais: usados para comparar string de caracteres e números, sendo que os objetos devem ser da mesma naturaza e as variáveis do mesmo tipo de dado. Eles são operadores binários e geralmente retornam valores lógicos (verdadeiro ou falso).

	- Operadores lógicos: são utilizados para combinar expressões relacionais. Estabelecem a conexão para a formação de novas proposições e também retornam como resultado valores lógicos verdadeiro ou falso.
		- AND: e (conjunção), é verdadeira se todas as condições forem verdadeiras;
		- OR: ou (disjunção), é veradeira se pelo menos uma condição for verdadeira
		- NOT: não (negação), inverto o valor da expressão ou condição. Se falsa, inverte para verdadeira e vice-versa.

**FUNÇÕES**

Têm uma especialidade de retornar ao programa que as chamou um valor associado ao nome da função.

**ESTRUTURAS PARA A CONSTRUÇÃO DE ALGORITMOS**

	- Sequenciação: conjunto de comandos que serão executados da mesma maneira que a escrita, numa sequência linear de cima para baixo e da esquerada para direita, uma de cada vez e que contenha praticamente comandos de atribuição, entrada e saída.

	- Decisão (seleção ou condição): tem que ser utilizada quando existe a necessidade de testar alguma condição, que trará um conjunto de ações a serem executadas a partir do resultado. Ela pode ser simples (SE/ENTÃO), composta (SE/ENTÃO/SENÃO), encadeada (SE/ENTÃO/SENÃO/SE/ENTÃO/SENÃO), múltipla (CASO/SELECIONE).
		- SIMPLES -> utilizada quando se necessita testar uma condição antes de executar um comando;
		- COMPOSTA -> apenas uma condição é avaliada e um comando ou um conjunto de comandos será executado;
		- ENCADEADAS -> ou aninhada, é usada quando se faz diversas comparações sempre com a mesma variável. Os comandos que fazem parte do bloco {VERDADEIRO} ou {FALSO} também podem ser uma estrutura de seleção e testar mais de uma condição. Como vantagem essa estrutura torna o algoritmo mais rápido e com um menor número de passos para se chegar ao final dele.
		- MÚLTIPLA -> usada para testar a condição, numa única expressão, que gera um resultado, ou valor de uma variável, que se encontra guardado num determinado conteúdo. Por exemplo, a estrutura é testada num primeiro comando e, caso seja verdadeira, executa-o, e caso seja falso, a próxima condição é testada. Caso todas as condições sejam falsas, pode-se usar um SENÃO na estrutura, que pode ser dispensado também. 

	- Repetição: aceita que uma sequência de comandos seja executada em um determinado número de vezes até que certa condição seja satisfeita. Tais estruturas são chamadas de laços ou loops. Os laços dividem-se em laços contados e laços condicionais. 
		- LAÇOS CONTADOS -> repetição com variável de controle. São usados quando se tem uma prévia de quantas vezes o comando composto no interior da construção será executado.
		- LAÇOS CONDICIONAIS -> não é necessário saber o número de vezes que o conjunto de comandos do interior do laço se repetirá, pois está sujeito a uma condição imposta ao laço.

Devido ao uso de estruturas de repetção para a preparação de algoritmos, é preciso utilizar dois tipos de variáveis para a resolução de diversos tipos de problemas, como variáveis acumuladoras e variáveis contadoras.

	- VARIÁVEL ACUMULADORA: na maioria das vezes é a variável utilizada na estrutura de controle. Esta variável recebe um valor inicial, normalmente o zero antes do início de uma estrutura de repetição, e é incrementada (ou decrementada) no interior da estrutura de um valor variável.
	- VARIÁVEL CONTADORA: é aquela que recebe um valor inicial, normalmente o zero antes do início de uma estrutura de repetição, sendo incrementada no interior da estrutura por um valor constante, na maioria das vezes 1.

**LAÇOS CONDICIONAIS**

Uma sequência de comandos será executada no seu interior até que uma determinada condição seja satisfeita.
As construções que implementas laços condicionais são:
	- Enquanto: laço condicional com teste no início;
	- Repita: laço condicional com teste no final.

A variável que é testada, tanto no início quanto no final, terá que estar associada sempre a um comando que faça a atualização no interior do laço. Se isso não acontecer, o programa repetirá indefinidamente este laço, causando uma situação que se chama laço infinito. 

**LAÇO CONDICIONAL COM TESTE NO INÍCIO**

Esse tipo de laço realiza um teste lógico em seu início, cenferindo se é aceitável ou não executar o conjunto de comandos no seu interior. Caso o resultado do teste seja VERDADEIRO, o laço é executado, retornando outra vez ao teste lógico e, desse modo, o processo será repetido enquanto a condição examinada for verdadeira. Quando o resultado da condição for FALSO, será executada a instrução ou o bloco de instruções do fim. A execução apenas deixará o laço quando a condição for falsa. Isso deve ser compreendido para que não haja um laço infinito.

**LAÇO CONDICIONAL COM TESTE NO FINAL**

A principal característica desta estrutura é que a instrução ou o bloco verdade será efetuado pelo menos uma vez, independente do resultado da condição. Ou seja, o laço é executado e então conferido se é aceitável ou não executar outra vez o conjunto de comandos em seu interior. 
O comando é executado uma vez, na sequência a condição é testada. Caso ela seja FALSA, novamente o comando é executado e este procedimento se repete até que a condição seja VERDADEIRA, e com isso a execução segue pelo comando imediatamente seguinte ao final da construção.

A estrutura REPITA se difere da ENQUANTO pelo fato de ser executada uma ou mais vezes (pelo menos uma), ao mesmo tempo que na outra estrutura o comando é executado zero ou mais vezes (provavelmente nenhuma). Para a inicialização da variável, a construção REPITA pode ser lida dentro do laço, diferente da ENQUANTO.

** LAÇOS CONTADOS OU REPETIÇÃO COM VARIÁVEL DE CONTROLE**

A principal característica deste tipo de estrutura é que se deve saber com antecipação o número de vezes em que a instrução ou bloco verdade se repetirá. Para isso atribui-se um valor numérico inicial à variável e faz-se uma comparação deste com um valor numérico final. Enquanto essa condição não acontecer, o bloco de comandos é executado e o valor da variável inicial é incrementado (ou decrementado), conforme valor prédefinido. Quando não pe definido um valor de incremento, automaticamento o valor assumido é +1.


												___---------*****DADOS*****---------___

**CONSISTÊNCIA DE DADOS**

É a verificação se um dado é válido ou não, ou seja, se ele se encontra durante os limites estabelecidos. Essa conferência garante uma correta execução do algoritmo. Caso aconteça uma entrada errada de dados, o algoritmo terá que aceitar uma nova entrada até que os mesmos fiquem dentro das especificações necessárias. Para que isso ocorra pode-se usar uma estrutura de repetição com teste no final.

**ARQUIVO DE DADOS**

Dados ficam na memória apenas durante a execução de um diagrama, depois disso são perdidos. Arquivos de dados podem ser armazenados e manipulados. Para entender isso é importante o conhecimento de alguns conceitos.
	- CAMPO: espaço reservado na memória para receber dados.
	- REGISTRO: conjunto de campos.
	- ARQUIVOS: conjunto de registros

Para usar a estrutura de dados do tipo arquivo praticamos a utilização de operações simples, tais como: abrir, fechar, apagar, copiar e renomear.

Ao abrir um arquivo é feita a leitura dos dados que estão em disco e realizada sua transferência para a memória. Essa transferência é realizada por registro. Quando aberto, o ponteiro é posicionado no primeiro registro.
	(ARQUIVO, RESGISTRO): arquivo é o nome da variável do tipo de arquivo determinado previamente e registro é o nome da variável do tipo de registro determinado anteriormente. BOF-> Begin of file; EOF-> End of file.

**ORGANIZANDO ARQUIVOS**

O comando feito com registros em uma estrutura de dados do tipo arquivo é a inclusão de um novo registro, consulta de um registro do arquivo, alteração dos dados guardados no arquivo ou exclusão de um registro do arquivo.
Pode-se acessar os dados de um arquivo de duas maneiras: 

	- ACESSO SEQUENCIAL: quando não se sabe onde um registro se encontra no arquivo e procura-se do início ao fim com um comando sequancial.

	- ACESSO RANDÔMICO OU DIRETO: é preciso saber sua posição física, por isso pode-se posicionar instantaneamente no registro sem ter que andar por todos os registros. Para isso é preciso que um campo do registro guarde o dado do número da posição física do registro dentro do arquivo. Tal campo é denominado CHAVE.
		- CHAVE: a chave de um registro deve ser única, pois nunca dois registros diferentes poderão ter a mesma localização!

**MANIPULAÇÃO DE REGISTROS**

Utiliza-se, em lógica, o seguinte comando para colocar o apontador de registros onde a posição física seja igual a chave:
	"Posicione (arquivo, chave);

**ESTRUTURA DE DADOS HOMEGÊNEOS OU ARRAYS**

Essas estruturas aceitam agrupar vários dados dentro de uma mesma variável. Elas recebem sempre o mesmo tipo de dado, por isso são conhecidas como estruturas homogêneas. São sinônimos: variáveis compostas, variáveis indexadas, variáveis subscritas, matrizes (bidimensional), arranjos, vetores (unidimensional), tabelas em memória ou arrays.

**VETORES**

Conjunto de variáveis no qual cada uma delas pode guardar um dado diferente, mas todas compartilham o mesmo nome. A esse nome são associados índices, que representam as posições do vetor. Um exemplo de como um vetor é visto na memória do computador:
		v = |2|9|5|3|7|6|
Cada elemento dos arrays pode ser referenciado por meio de índices:
v[1]= 2
v[3]= 5
v[5]= 7

**MATRIZES**

Matrizes são estruturas de dados (arrays) que precisam de dois índices para individualizar um elemento do conjunto. O primeiro índice representa as linhas e o segundo as colunas.
	m= |9 |8 |4 |7 |6 |
	   |2 |7 |3 |2 |5 |
	   |1 |4 |12|1 |2 |
Cada elemento dos arrays pode ser referenciaso por meio de índices m [linha, coluna]= x
m [1,4]= 7
m [3,5]= 2 


												___---------*****MUDULARIZAÇÃO*****---------___

É um processo usado para tornar mais fácil a criação de programas maiores. É um método de programação que consiste em dividir o algoritmo complexo em várias partes pequenas com funções bem definidas, gerenciado por módulos ou subalgoritmos. A parte inicial é nomeada algoritmo principal e as outras partes subalgoritmos.

Existem dias formas de subalgoritmos que são PROCEDIMENTO e FUNÇÃO.

**PROCEDIMENTO**

É um programa que para ser executado tem que ser chamado pelo algoritmo principal que o constitui ou por outro subalgoritmo. É um subalgoritmo que é ligado através da colocação do seu nome em qualquer lugar do programa. Quando o nome é localizado, acontece um desvio no programa para que os comandos do subalgoritmo sejam realizados. Quando ele é finalozado, a execução retornará ao ponto seguinte à chamada do procedimento. Também são utilizadas pelo procedimento todas as variáveis declaradas no início do programa. Exemplo:

ALGORITMO Procedimento
VAR
	T, V, X : real
Procedimento Soma
INÍCIO
	X <- (T + V)
FIM
INÍCIO
	Escreva ("entre com dois números:");
	Leia (T, V)
	Soma
FIM

**FUNÇÃO**

São muito parecidas como os procedimentos, mas têm a particularidade especial de retornar ao programa que as chamou um valor ligado ao seu nome.

**VARIÁVEIS GLOBAIS E VARIÁVEIS LOCAIS**

As variáveis declaradas no início do algoritmo são chamadas de globais. Elas são consideradas visíveis, pois podem ser usadas no algoritmo principal e também por todos os subalgoritmos.
Já as variáveis que são declaradas no início de um subalgoritmo são chamadas de locais, podendo ser usadas dentro do subalgoritmo que as declarou. Nunca são usadas por outro subalgoritmo ou pelo algoritmo principal. É aceitável determinar variáveis globais e locais usando o mesmo nome, sendo que qualquer alteração na variável local não comprometerá o conteúdo da variável global.

**PARÂMETROS**

Utiliza-se quando se quer escrever um subalgoritmo que seja possivelmente o mais genérico. Parâmetros são caminhos onde se constitui uma comunicação bidirecional entre um subalgoritmo e o algoritmo chamador.
Exemplo:

ALGORITMO Parâmetros

VAR
	D: real

FUNÇÃO Média (A, B: real) : real

INÍCIO
	retorna (A + B) / 2
FIM
INÍCIO
	D <- Media (5, 7)

	Escreva "Média é igual a ", D
FIM

Neste caso A e B são parâmetros formais da função "Média", enquanto 5 e 7 são parâmetros reais do algoritmo principal que substituirão A e B quando da chamada da função "Média".

**PASSAGEM DE PARÂMETROS POR VALOR**

As mudanças ocorrem nos parâmetros formais, dentro do subprograma, e não se refletem nos parâmetros reais.
Parâmetros formais são de grande utilidade apenas na determinação do subalgoritmo; já os parâmetros reias substituem-nos a cada chamada do subalgoritmo. Os parâmetros reias podem ser diferentes a cada chamada de um subalgoritmo.
	--- Parâmetros formais são nomes simbólicos colocados no cabeçalho de subalgoritmos. Da mesma maneira como se trabalha com variáveis globais e locais dentro de um subalgoritmo, trabalha-se com os parâmetros formais.

**PASSAGEM DE PARÂMETROS POR REFERÊNCIA**

Toda mudança realizada em um parâmetro formal corresponde à mesma mudança realizada no seu parâmetro real associado. Sendo assim, quando a passagem é por referência, isto quer dizer que o parâmetro é de "entrada-saída" e o de valor é apenas de entrada.
	--- Parâmetros reais são aqueles que trocam os parâmetros formais quando existe a chamada de um subalgoritmo.
